[utilities.py\select_gpu] os.environ["CUDA_VISIBLE_DEVICES"]: 0

Command: -d test -m ANRS -e 10 -p 1 -v 19438 -rs 1337 -gpu 0 -vb 1 -sm test_ANRS

Loading 'info' from "./datasets/test/test_info.pkl"..
'info' loaded!

[INFO] # of Users: 11,782, # of Items: 1,127

Creating model (Selected Model: ANRS)..
[args.use_cuda: True] Model is on the GPU! (args.gpu: 0, torch.cuda.current_device(): 0)
Model created! Elapsed Time: 1.36s (0.02 minute)

Loading uid_userDoc from "./datasets/test/test_uid_userDoc.npy"..
uid_userDoc loaded! [uid_userDoc: (11782, 500)]

Loading iid_itemDoc from "./datasets/test/test_iid_itemDoc.npy"..
iid_itemDoc loaded! [iid_itemDoc: (1127, 500)]

Loading pretrained word embeddings from "./datasets/test/test_wid_wordEmbed.npy"..
Pretrained word embeddings loaded! [wid_wEmbed: (19440, 300)]

Initialization Complete.. Elapsed Time: 1.45s (0.02 minute)

Loading training set from "./datasets/test/test_split_train.pkl"..
Training set loaded! Note: Training examples are shuffled every epoch, i.e. shuffle = True!

Loading validation set from "./datasets/test/test_split_dev.pkl"..
Validation set loaded!

Loading testing set from "./datasets/test/test_split_test.pkl"..
Testing set loaded!

Train/Dev/Test splits loaded! |TRAIN|: 15,873, |DEV|: 927, |TEST|: 940
Train/Dev/Test splits loaded! Elapsed Time: 1.46s (0.02 minute)

Performing initial evaluation for VALIDATION set..
[Initial] [Dev]  MSE: 18.90507, MAE: 4.22242

Performing initial evaluation for TESTING set..
[Initial] [Test] MSE: 18.79383, MAE: 4.19434

Initial Evaluation Complete.. Elapsed Time: 2.00s (0.03 minute)

Optimizer: Adam, Loss Function: MSELoss

Model Size: 12,302,691
# of Trainable Parameters: 16,191
ANR (
  (uid_userDoc): Embedding(11782, 500), weights = ((11782, 500),), parameters = 5,891,000
  (iid_itemDoc): Embedding(1127, 500), weights = ((1127, 500),), parameters = 563,500
  (wid_wEmbed): Embedding(19440, 300), weights = ((19440, 300),), parameters = 5,832,000
  (shared_ANR_ARL): ANR_ARL(
    (aspEmbed): Embedding(5, 30)
    (aspProj): Parameter(5, 300, 10)
  ), weights = ((5, 300, 10), (5, 30)), parameters = 15,150 (Trainable)
  (ANRS_RatingPred): ANRS_RatingPred(
    (userFC): Linear(in_features=50, out_features=10, bias=True)
    (itemFC): Linear(in_features=50, out_features=10, bias=True)
    (userFC_Dropout): Dropout(p=0.5, inplace=False)
    (itemFC_Dropout): Dropout(p=0.5, inplace=False)
    (prediction): Linear(in_features=20, out_features=1, bias=True)
  ), weights = ((10, 50), (10,), (10, 50), (10,), (1, 20), (1,)), parameters = 1,041 (Trainable)
)


batch_userDoc: torch.Size([128, 500])
batch_itemDoc: torch.Size([128, 500])
batch_userDocEmbed: torch.Size([128, 500, 300])
batch_itemDocEmbed: torch.Size([128, 500, 300])

[Input to ARL] batch_userDocEmbed: torch.Size([128, 500, 300])

============================== Aspect Representation Learning (ARL) ==============================
[Input] batch_docIn: torch.Size([128, 500, 300])

As an example, for <Aspect 0>:

	batch_docIn: torch.Size([128, 500, 300])
	self.aspProj[0]: torch.Size([300, 10])
	batch_aspProjDoc: torch.Size([128, 500, 10])

	batch_aspEmbed: torch.Size([128, 30, 1])

	batch_aspProjDoc_padded [PADDED; Pad Size: 1]: torch.Size([128, 502, 10])
	batch_aspProjDoc_padded: torch.Size([128, 500, 10, 3])
	batch_aspProjDoc_padded: torch.Size([128, 500, 3, 10])
	batch_aspProjDoc_padded: torch.Size([128, 500, 30])

	batch_aspAttn [Window Size: 3]: torch.Size([128, 500, 1])

	batch_aspRep: torch.Size([128, 500, 10])
	batch_aspRep: torch.Size([128, 10])

[Output] <All 5 Aspects>
[Output] batch_aspAttn: torch.Size([128, 5, 500])
[Output] batch_aspRep: torch.Size([128, 5, 10])
============================== ==================================== ==============================

[Output of ARL] userAspAttn: torch.Size([128, 5, 500])
[Output of ARL] userAspDoc:  torch.Size([128, 5, 10])

[Input to ARL] batch_itemDocEmbed: torch.Size([128, 500, 300])

============================== Aspect Representation Learning (ARL) ==============================
[Input] batch_docIn: torch.Size([128, 500, 300])

As an example, for <Aspect 0>:

	batch_docIn: torch.Size([128, 500, 300])
	self.aspProj[0]: torch.Size([300, 10])
	batch_aspProjDoc: torch.Size([128, 500, 10])

	batch_aspEmbed: torch.Size([128, 30, 1])

	batch_aspProjDoc_padded [PADDED; Pad Size: 1]: torch.Size([128, 502, 10])
	batch_aspProjDoc_padded: torch.Size([128, 500, 10, 3])
	batch_aspProjDoc_padded: torch.Size([128, 500, 3, 10])
	batch_aspProjDoc_padded: torch.Size([128, 500, 30])

	batch_aspAttn [Window Size: 3]: torch.Size([128, 500, 1])

	batch_aspRep: torch.Size([128, 500, 10])
	batch_aspRep: torch.Size([128, 10])

[Output] <All 5 Aspects>
[Output] batch_aspAttn: torch.Size([128, 5, 500])
[Output] batch_aspRep: torch.Size([128, 5, 10])
============================== ==================================== ==============================

[Output of ARL] itemAspAttn: torch.Size([128, 5, 500])
[Output of ARL] itemAspDoc:  torch.Size([128, 5, 10])


============================== Aspect-Based BASIC Rating Predictor ==============================
[Input] userAspRep: torch.Size([128, 5, 10])
[Input] itemAspRep: torch.Size([128, 5, 10])

[Concatenated] concatUserRep: torch.Size([128, 50])
[Concatenated] concatItemRep: torch.Size([128, 50])

[After FC, i.e. torch.nn.Linear] abstractUserRep: torch.Size([128, 10])
[After FC, i.e. torch.nn.Linear] abstractItemRep: torch.Size([128, 10])
[After ReLU] abstractUserRep: torch.Size([128, 10])
[After ReLU] abstractItemRep: torch.Size([128, 10])
[After Dropout (Dropout Rate of 0.5)] abstractUserRep: torch.Size([128, 10])
[After Dropout (Dropout Rate of 0.5)] abstractItemRep: torch.Size([128, 10])

[Input to Final Prediction Layer] userItemRep: torch.Size([128, 20])

[ANRS_RatingPred Output] rating_pred: torch.Size([128, 1])
============================== =================================== ==============================


[Final Output of ANRS] rating_pred: torch.Size([128, 1])


[Epoch 1/10] Training Loss: 6.91097	Elapsed Time: 3.98s (0:00:03)
[Epoch 1] [Dev]  MSE: 1.56195, MAE: 1.10287
[Epoch 1] [Test] MSE: 1.67345, MAE: 1.14831

*** MODEL has obtained the best DEV MSE of 1.56195 so far!
*** MODEL saved to "./__saved_models__/test - ANRS/test_ANRS_1337.pth"



[Epoch 2/10] Training Loss: 2.69839	Elapsed Time: 8.20s (0:00:08)
[Epoch 2] [Dev]  MSE: 1.26362, MAE: 0.95263
[Epoch 2] [Test] MSE: 1.38918, MAE: 1.00532

*** MODEL has obtained the best DEV MSE of 1.26362 so far!
*** MODEL saved to "./__saved_models__/test - ANRS/test_ANRS_1337.pth"



[Epoch 3/10] Training Loss: 2.56172	Elapsed Time: 12.42s (0:00:12)
[Epoch 3] [Dev]  MSE: 1.27371, MAE: 0.96693
[Epoch 3] [Test] MSE: 1.40492, MAE: 1.01945



[Epoch 4/10] Training Loss: 2.45559	Elapsed Time: 16.67s (0:00:16)
[Epoch 4] [Dev]  MSE: 1.52186, MAE: 1.10620
[Epoch 4] [Test] MSE: 1.64943, MAE: 1.15468



[Epoch 5/10] Training Loss: 2.44413	Elapsed Time: 20.89s (0:00:20)
[Epoch 5] [Dev]  MSE: 1.14843, MAE: 0.88296
[Epoch 5] [Test] MSE: 1.29033, MAE: 0.93256

*** MODEL has obtained the best DEV MSE of 1.14843 so far!
*** MODEL saved to "./__saved_models__/test - ANRS/test_ANRS_1337.pth"



[Epoch 6/10] Training Loss: 2.37937	Elapsed Time: 25.15s (0:00:25)
[Epoch 6] [Dev]  MSE: 1.16698, MAE: 0.90183
[Epoch 6] [Test] MSE: 1.31005, MAE: 0.95267



[Epoch 7/10] Training Loss: 2.25648	Elapsed Time: 29.68s (0:00:29)
[Epoch 7] [Dev]  MSE: 1.13588, MAE: 0.87982
[Epoch 7] [Test] MSE: 1.27883, MAE: 0.92854

*** MODEL has obtained the best DEV MSE of 1.13588 so far!
*** MODEL saved to "./__saved_models__/test - ANRS/test_ANRS_1337.pth"



[Epoch 8/10] Training Loss: 2.18995	Elapsed Time: 34.27s (0:00:34)
[Epoch 8] [Dev]  MSE: 1.16000, MAE: 0.89859
[Epoch 8] [Test] MSE: 1.30765, MAE: 0.94879



[Epoch 9/10] Training Loss: 2.15399	Elapsed Time: 38.65s (0:00:38)
[Epoch 9] [Dev]  MSE: 1.14876, MAE: 0.89182
[Epoch 9] [Test] MSE: 1.29558, MAE: 0.94033



[Epoch 10/10] Training Loss: 1.97859	Elapsed Time: 42.91s (0:00:42)
[Epoch 10] [Dev]  MSE: 1.16211, MAE: 0.90186
[Epoch 10] [Test] MSE: 1.31138, MAE: 0.95138

[Training Loss]
[6.91097, 2.69839, 2.56172, 2.45559, 2.44413, 2.37937, 2.25648, 2.18995, 2.15399, 1.97859]

[Dev MSE]
[1.56195, 1.26362, 1.27371, 1.52186, 1.14843, 1.16698, 1.13588, 1.16, 1.14876, 1.16211]
[Test MSE]
[1.67345, 1.38918, 1.40492, 1.64943, 1.29033, 1.31005, 1.27883, 1.30765, 1.29558, 1.31138]
[Test MAE]
[1.14831, 1.00532, 1.01945, 1.15468, 0.93256, 0.95267, 0.92854, 0.94879, 0.94033, 0.95138]


Best Dev MSE: 1.13588 (Obtained during Evaluation #7)
Test MSE: 1.27883, Test MAE: 0.92854

End of Program! Elapsed Time: 45.17s (0:00:45)




/media/zzhenry/5a6fff39-6cef-4709-85ff-dcad27c4e770/zzhenry/Xulab/zzhenry/NLP/ANR/model/utilities.py:51: UserWarning: volatile was removed and now has no effect. Use `with torch.no_grad():` instead.
  return Variable(x, volatile = (False if phase == "Train" else True))
/media/zzhenry/5a6fff39-6cef-4709-85ff-dcad27c4e770/zzhenry/Xulab/zzhenry/NLP/ANR/model/utilities.py:51: UserWarning: volatile was removed and now has no effect. Use `with torch.no_grad():` instead.
  return Variable(x, volatile = (False if phase == "Train" else True))